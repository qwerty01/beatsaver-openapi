/*
 * BeatSaver API
 *
 * WIP  If you want to keep any kind of mirror instead of making 100s of requests instead consider subscribing to the websocket api. wss://ws.beatsaver.com/maps  Messages will be in the style {\"type\": \"MAP_UPDATE\", \"msg\": __MAP_DATA_HERE__}
 *
 * The version of the OpenAPI document: 0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};
use serde_aux::container_attributes::deserialize_struct_case_insensitive;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MapDetail {
    #[serde(rename = "automapper", skip_serializing_if = "Option::is_none")]
    pub automapper: Option<bool>,
    #[serde(rename = "blQualified", skip_serializing_if = "Option::is_none")]
    pub bl_qualified: Option<bool>,
    #[serde(rename = "blRanked", skip_serializing_if = "Option::is_none")]
    pub bl_ranked: Option<bool>,
    #[serde(rename = "bookmarked", skip_serializing_if = "Option::is_none")]
    pub bookmarked: Option<bool>,
    #[serde(rename = "collaborators", skip_serializing_if = "Option::is_none")]
    pub collaborators: Option<Vec<models::UserDetail>>,
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "curatedAt", skip_serializing_if = "Option::is_none")]
    pub curated_at: Option<String>,
    #[serde(rename = "curator", skip_serializing_if = "Option::is_none")]
    pub curator: Option<Box<models::UserDetail>>,
    #[serde(rename = "declaredAi", skip_serializing_if = "Option::is_none")]
    pub declared_ai: Option<DeclaredAi>,
    #[serde(rename = "deletedAt", skip_serializing_if = "Option::is_none")]
    pub deleted_at: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "lastPublishedAt", skip_serializing_if = "Option::is_none")]
    pub last_published_at: Option<String>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Box<models::MapDetailMetadata>>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "qualified", skip_serializing_if = "Option::is_none")]
    pub qualified: Option<bool>,
    #[serde(rename = "ranked", skip_serializing_if = "Option::is_none")]
    pub ranked: Option<bool>,
    #[serde(rename = "stats", skip_serializing_if = "Option::is_none")]
    pub stats: Option<Box<models::MapStats>>,
    #[serde(
        rename = "tags",
        skip_serializing_if = "Option::is_none",
        deserialize_with = "deserialize_struct_case_insensitive"
    )]
    pub tags: Option<Vec<Tags>>,
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[serde(rename = "uploaded", skip_serializing_if = "Option::is_none")]
    pub uploaded: Option<String>,
    #[serde(rename = "uploader", skip_serializing_if = "Option::is_none")]
    pub uploader: Option<Box<models::UserDetail>>,
    #[serde(rename = "versions", skip_serializing_if = "Option::is_none")]
    pub versions: Option<Vec<models::MapVersion>>,
}

impl MapDetail {
    pub fn new() -> MapDetail {
        MapDetail {
            automapper: None,
            bl_qualified: None,
            bl_ranked: None,
            bookmarked: None,
            collaborators: None,
            created_at: None,
            curated_at: None,
            curator: None,
            declared_ai: None,
            deleted_at: None,
            description: None,
            id: None,
            last_published_at: None,
            metadata: None,
            name: None,
            qualified: None,
            ranked: None,
            stats: None,
            tags: None,
            updated_at: None,
            uploaded: None,
            uploader: None,
            versions: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DeclaredAi {
    #[serde(rename = "Admin")]
    Admin,
    #[serde(rename = "Uploader")]
    Uploader,
    #[serde(rename = "SageScore")]
    SageScore,
    #[serde(rename = "None")]
    None,
}

impl Default for DeclaredAi {
    fn default() -> DeclaredAi {
        Self::Admin
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Tags {
    #[serde(rename = "None")]
    None,
    #[serde(rename = "Tech")]
    Tech,
    #[serde(rename = "DanceStyle")]
    DanceStyle,
    #[serde(rename = "Speed")]
    Speed,
    #[serde(rename = "Balanced")]
    Balanced,
    #[serde(rename = "Challenge")]
    Challenge,
    #[serde(rename = "Accuracy")]
    Accuracy,
    #[serde(rename = "Fitness")]
    Fitness,
    #[serde(rename = "Swing")]
    Swing,
    #[serde(rename = "Nightcore")]
    Nightcore,
    #[serde(rename = "Folk")]
    Folk,
    #[serde(rename = "Family")]
    Family,
    #[serde(rename = "Ambient")]
    Ambient,
    #[serde(rename = "Funk")]
    Funk,
    #[serde(rename = "Jazz")]
    Jazz,
    #[serde(rename = "Classical")]
    Classical,
    #[serde(rename = "Soul")]
    Soul,
    #[serde(rename = "Speedcore")]
    Speedcore,
    #[serde(rename = "Punk")]
    Punk,
    #[serde(rename = "RB")]
    Rb,
    #[serde(rename = "Holiday")]
    Holiday,
    #[serde(rename = "Vocaloid")]
    Vocaloid,
    #[serde(rename = "JRock")]
    JRock,
    #[serde(rename = "Trance")]
    Trance,
    #[serde(rename = "DrumBass")]
    DrumBass,
    #[serde(rename = "Comedy")]
    Comedy,
    #[serde(rename = "Instrumental")]
    Instrumental,
    #[serde(rename = "Hardcore")]
    Hardcore,
    #[serde(rename = "KPop")]
    KPop,
    #[serde(rename = "Indie")]
    Indie,
    #[serde(rename = "Techno")]
    Techno,
    #[serde(rename = "House")]
    House,
    #[serde(rename = "Game")]
    Game,
    #[serde(rename = "Film")]
    Film,
    #[serde(rename = "Alt")]
    Alt,
    #[serde(rename = "Dubstep")]
    Dubstep,
    #[serde(rename = "Metal")]
    Metal,
    #[serde(rename = "Anime")]
    Anime,
    #[serde(rename = "HipHop")]
    HipHop,
    #[serde(rename = "JPop")]
    JPop,
    #[serde(rename = "Dance")]
    Dance,
    #[serde(rename = "Rock")]
    Rock,
    #[serde(rename = "Pop")]
    Pop,
    #[serde(rename = "Electronic")]
    Electronic,
}

impl Default for Tags {
    fn default() -> Tags {
        Self::None
    }
}
